{"version":3,"sources":["Components/Home.js","Components/Login.js","App.js","serviceWorker.js","index.js"],"names":["Home","Flower","name","pictureName","this","picture","flowers","drawPics","f","p","className","src","alt","username","props","location","state","userN","length","to","React","Component","Login","onSubmit","event","user","trim","setState","userGood","preventDefault","whenChanged","value","target","from","pathname","type","onChange","App","path","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sUA8EeA,G,6KAxED,IAEAC,EACF,WAAYC,EAAMC,GAAc,oBAC5BC,KAAKF,KAAOA,EACZE,KAAKC,QAAUF,GAanBG,EAAU,CATC,IAAIL,EAAO,WAAY,gBAClB,IAAIA,EAAO,iBAAkB,qBACtC,IAAIA,EAAO,OAAQ,YAClB,IAAIA,EAAO,QAAS,aAChB,IAAIA,EAAO,YAAa,iBAC5B,IAAIA,EAAO,QAAS,aACrB,IAAIA,EAAO,OAAQ,YACd,IAAIA,EAAO,aAAc,kBAazC,SAASM,EAASC,GACd,IAAIC,EAAI,WAAWD,EAAEH,QACrB,OACI,6BACI,yBAAKK,UAAU,QAAQC,IAAKF,EAAGG,IAAI,KACnC,6BACCJ,EAAEN,MAMf,IAAIW,EAAW,GASf,OARIT,KAAKU,MAAMC,UACPX,KAAKU,MAAMC,SAASC,OAChBZ,KAAKU,MAAMC,SAASC,MAAMC,QAC1BJ,EAAWT,KAAKU,MAAMC,SAASC,MAAMC,OAM7C,6BACI,yBAAKP,UAAU,YACVG,EAASK,OAAS,EAAI,6BAAML,EACzB,6BAAM,kBAAC,IAAD,CAAMM,GAAG,KAAT,YACJ,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEV,yBAAKT,UAAU,QACVH,EAASD,EAAQ,IACjBC,EAASD,EAAQ,IACjBC,EAASD,EAAQ,IACjBC,EAASD,EAAQ,IACjBC,EAASD,EAAQ,IACjBC,EAASD,EAAQ,IACjBC,EAASD,EAAQ,IACjBC,EAASD,EAAQ,U,GAnEnBc,IAAMC,YC+CVC,G,wDA7CX,WAAYR,GAAQ,IAAD,8BACf,cAAMA,IAOVS,SAAW,SAACC,GACL,EAAKR,MAAMS,KAAKC,OAAOR,OAAS,GAC/B,EAAKS,SAAS,CAACC,UAAU,IAE7BJ,EAAMK,kBAZS,EAenBC,YAAc,SAACN,GACX,IAAMO,EAAQP,EAAMQ,OAAOD,MAC3B,EAAKJ,SAAS,CAACF,KAAMM,KAfrB,EAAKf,MAAQ,CACTS,KAAM,GACNG,UAAU,GAJC,E,qDAsBf,IAAIK,EAAO,CAACC,SAAU,IAAKlB,MAAO,CAACC,MAAOb,KAAKY,MAAMS,OAErD,OAAIrB,KAAKY,MAAMY,SAEP,kBAAC,IAAD,CAAUT,GAAIc,IAKd,0BAAMvB,UAAU,WAAWa,SAAUnB,KAAKmB,UACtC,4CACA,2BAAOQ,MAAO3B,KAAKY,MAAMS,KACrBU,KAAK,OACLjC,KAAK,WACLkC,SAAUhC,KAAK0B,cACV,6BACT,4BAAQK,KAAK,UAAb,c,GAxCAf,IAAMC,YCoBXgB,MAdf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,IAAIC,OAAQ,SAAAzB,GAAK,OAAI,kBAAC,EAASA,SCL/B0B,QACW,cAA7BC,OAAO1B,SAAS2B,UAEe,UAA7BD,OAAO1B,SAAS2B,UAEhBD,OAAO1B,SAAS2B,SAASC,MACvB,2DCZNC,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f67e60a1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Home.css';\r\nimport { Link } from \"react-router-dom\"\r\n\r\nclass Home extends React.Component {\r\n\r\n    render() {\r\n\r\n        class Flower {\r\n            constructor(name, pictureName) {\r\n                this.name = name;\r\n                this.picture = pictureName;\r\n            }\r\n        }\r\n\r\n        let daffodil = new Flower('Daffodil', 'daffodil.png');\r\n        let cherryblossom = new Flower('Cherry blossom', 'cherryblossom.png');\r\n        let lily = new Flower('Lily', 'lily.jpg');\r\n        let daisy = new Flower('Daisy', 'daisy.jpg');\r\n        let sunflower = new Flower('Sunflower', 'sunflower.png');\r\n        let tulip = new Flower('Tulip', 'tulip.png');\r\n        let rose = new Flower('Rose', 'rose.png');\r\n        let waterlily = new Flower('Water lily', 'waterlily.png');\r\n\r\n        let flowers = [\r\n            daffodil,\r\n            cherryblossom,\r\n            lily,\r\n            daisy,\r\n            sunflower,\r\n            tulip,\r\n            rose,\r\n            waterlily\r\n        ];\r\n\r\n        function drawPics(f) {\r\n            let p = \"/images/\"+f.picture;\r\n            return (\r\n                <div>\r\n                    <img className=\"image\" src={p} alt=\"\" />\r\n                    <br/>\r\n                    {f.name}\r\n                </div>\r\n            );\r\n\r\n       }\r\n\r\n        let username = '';\r\n        if (this.props.location) {\r\n            if (this.props.location.state) {\r\n                if (this.props.location.state.userN) {\r\n                    username = this.props.location.state.userN;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"TopRight\">\r\n                    {username.length > 0 ? <div>{username}\r\n                        <br /><Link to=\"/\"> Logout</Link></div>\r\n                        : <Link to='/login'>Login</Link>}\r\n                </div>\r\n                <div className=\"Pics\">\r\n                    {drawPics(flowers[0])}\r\n                    {drawPics(flowers[1])}\r\n                    {drawPics(flowers[2])}\r\n                    {drawPics(flowers[3])}\r\n                    {drawPics(flowers[4])}\r\n                    {drawPics(flowers[5])}\r\n                    {drawPics(flowers[6])}\r\n                    {drawPics(flowers[7])}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './Login.css';\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\nclass Login extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: \"\",\r\n            userGood: false\r\n        }\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        if(this.state.user.trim().length > 0){\r\n            this.setState({userGood: true});\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    whenChanged = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({user: value});\r\n    }\r\n\r\n\r\n    render(){\r\n        let from = {pathname: '/', state: {userN: this.state.user}}\r\n\r\n        if (this.state.userGood) {\r\n            return(\r\n                <Redirect to={from} />\r\n            );\r\n\r\n        } else {\r\n            return (\r\n                <form className=\"TopRight\" onSubmit={this.onSubmit}>\r\n                    <label>Username:</label>\r\n                    <input value={this.state.user}\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        onChange={this.whenChanged}\r\n                    ></input><br></br>\r\n                    <button type=\"submit\">Login</button>\r\n                </form>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Login","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter,\n  Route,\n  Switch,\n} from \"react-router-dom\"\nimport Home from './Components/Home';\nimport Login from './Components/Login';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path='/login'>\n          <Login />\n        </Route>\n        <Route path='/' render={props => <Home {...props} />}>\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}