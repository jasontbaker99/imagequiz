{"version":3,"sources":["Components/Home.js","Components/Login.js","App.js","serviceWorker.js","index.js"],"names":["Home","username","this","props","location","state","userN","className","length","to","React","Component","Login","onSubmit","event","user","trim","setState","userGood","preventDefault","whenChanged","value","target","from","pathname","type","name","onChange","App","exact","path","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sUAiCeA,G,6KAnBP,IAAIC,EAAW,GAWf,OATIC,KAAKC,MAAMC,UACPF,KAAKC,MAAMC,SAASC,OAChBH,KAAKC,MAAMC,SAASC,MAAMC,QAC1BL,EAAWC,KAAKC,MAAMC,SAASC,MAAMC,OAO7C,yBAAKC,UAAU,SACVN,EAASO,OAAS,EAAI,6BAAK,6BAAMP,GAAe,kBAAC,IAAD,CAAMQ,GAAG,KAAT,WAAmC,kBAAC,IAAD,CAAMA,GAAG,UAAT,c,GAvBjFC,IAAMC,YCwDVC,G,wDAtDX,WAAYT,GAAQ,IAAD,8BACf,cAAMA,IAOVU,SAAW,SAACC,GACL,EAAKT,MAAMU,KAAKC,OAAOR,OAAS,GAC/B,EAAKS,SAAS,CAACC,UAAU,IAE7BJ,EAAMK,kBAZS,EAenBC,YAAc,SAACN,GACX,IAAMO,EAAQP,EAAMQ,OAAOD,MAC3B,EAAKJ,SAAS,CAACF,KAAMM,KAfrB,EAAKhB,MAAQ,CACTU,KAAM,GACNG,UAAU,GAJC,E,qDAsBf,IAAIK,EAAO,CAACC,SAAU,IAAKnB,MAAO,CAACC,MAAOJ,KAAKG,MAAMU,OAErD,OAAIb,KAAKG,MAAMa,SAEP,kBAAC,IAAD,CAAUT,GAAIc,IAcd,0BAAMV,SAAUX,KAAKW,UACjB,4CACA,2BAAOQ,MAAOnB,KAAKG,MAAMU,KACrBU,KAAK,OACLC,KAAK,WACLC,SAAUzB,KAAKkB,cACV,6BACT,4BAAQK,KAAK,UAAb,c,GAjDAf,IAAMC,YCsBXiB,MAhBf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAA5B,GAAK,OAAG,kBAAC,EAASA,MAEhD,kBAAC,IAAD,CAAO2B,KAAK,UACV,kBAAC,EAAD,WCNQE,QACW,cAA7BC,OAAO7B,SAAS8B,UAEe,UAA7BD,OAAO7B,SAAS8B,UAEhBD,OAAO7B,SAAS8B,SAASC,MACvB,2DCZNC,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.583cd7d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Home.css';\r\nimport { Link } from \"react-router-dom\"\r\n\r\nclass Home extends React.Component {\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         user: \"\",\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        let username = '';\r\n\r\n        if (this.props.location) {\r\n            if (this.props.location.state) {\r\n                if (this.props.location.state.userN) {\r\n                    username = this.props.location.state.userN;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <div className=\"Login\">\r\n                {username.length > 0 ? <div><div>{username}</div><Link to=\"/\">Logout</Link></div> : <Link to='/login'>Login</Link>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './Login.css';\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\nclass Login extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: \"\",\r\n            userGood: false\r\n        }\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        if(this.state.user.trim().length > 0){\r\n            this.setState({userGood: true});\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    whenChanged = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({user: value});\r\n    }\r\n\r\n\r\n    render(){\r\n        let from = {pathname: '/', state: {userN: this.state.user}}\r\n\r\n        if (this.state.userGood) {\r\n            return(\r\n                <Redirect to={from} />\r\n            );\r\n            // return (\r\n            //     <div>\r\n            //         <div className=\"user\">\r\n            //             {this.state.user}\r\n            //         </div>\r\n            //         <div className=\"Logout\">\r\n            //             <Link to=\"/\">Logout</Link>\r\n            //         </div>\r\n            //     </div>\r\n            // );\r\n        } else {\r\n            return (\r\n                <form onSubmit={this.onSubmit}>\r\n                    <label>Username:</label>\r\n                    <input value={this.state.user}\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        onChange={this.whenChanged}\r\n                    ></input><br></br>\r\n                    <button type=\"submit\">Login</button>\r\n                </form>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Login","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter,\n  Route,\n  Switch,\n} from \"react-router-dom\"\nimport Home from './Components/Home';\nimport Login from './Components/Login';\n\nfunction App() {\n  return (\n    <div>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/' render={props=> <Home {...props} />}>\n          </Route>\n          <Route path='/login'>\n            <Login />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}